import { useNavigate } from "react-router-dom";
import { tabs, TabStatus } from ".";
import CloseIcon from "@mui/icons-material/Close";
import ConfirmActionPopup from "@/components/ConfirmAction/confirm-action-popup";
import { useState } from "react";
import InfoPopup from "@/components/InfoPopup/info-popup";
import { useApi } from "@/contexts/APIContext";
import { apiCancelOrder, IOrder } from "./service";
interface OrderListProps {
  selectedStatus: TabStatus;
}

interface SellerOrderItemProps {
  order: IOrder;
  selectedStatus: TabStatus;
}

const SellerOrderItem: React.FC<SellerOrderItemProps> = ({
  order,
  selectedStatus,
}) => {
  const { fetchOrders } = useApi();
  const nav = useNavigate();
  const [open, setOpen] = useState(false);
  const handleOpen = () => setOpen(true);
  const onConfirm = async () => {
    try {
      await apiCancelOrder(order.id);
      await fetchOrders();
      setOpen(false);
      setIsOpenInfo(true);
    } catch (error) {
      console.log("üöÄ ~ onConfirm ~ error:", error);
    }
  };
  const onCancel = () => {
    setOpen(false);
  };

  const [isOpenInfo, setIsOpenInfo] = useState(false);

  const onConfirmInfo = () => {
    setIsOpenInfo(false);
  };
  return (
    <>
      <div
        className="border border-green-500 rounded-lg p-4 mb-4 flex flex-col gap-3"
        onClick={() => nav(`/seller/order/${order.id}`)}
      >
        {/* Left Section: Order Details */}
        <div className="flex flex-col gap-3">
          <div className="flex items-center justify-between">
            <span className="text-primary-color font-semibold">
              {order.start_time} ‚Üí {order.end_time}
            </span>
            {/* <button className="text-green-500 text-xl font-bold">
              <CloseIcon />
            </button> */}
          </div>
          <h3 className="text-lg font-bold text-gray-800">
            {order.category_name}
          </h3>
          <div className="text-gray-700 flex gap-2">
            <span className="font-semibold">S·∫£n ph·∫©m:</span>{" "}
            <div className="flex-1 flex flex-col gap-2">
              {order.products.map((product, index) => (
                <div key={index}>
                  <span className="">
                    {product.name}: {product.quantity}({product.unit})
                  </span>
                </div>
              ))}
            </div>
          </div>
          <p className="text-gray-700">
            <span className="font-semibold">ƒê·ªãa ch·ªâ:</span> {order.address}
          </p>
          <p className="text-gray-700">
            <span className="font-semibold">S·ªë ƒëi·ªán tho·∫°i:</span>{" "}
            {order.phone_number}
          </p>
        </div>

        {selectedStatus === TabStatus.REQUESTED && (
          <div className="flex justify-end">
            <button
              className="px-2 py-1 text-xs text-white font-medium bg-red-500 rounded"
              onClick={(e) => {
                e.stopPropagation();
                handleOpen();
              }}
            >
              H·ªßy ƒë∆°n
            </button>
          </div>
        )}
      </div>
      <ConfirmActionPopup
        isOpen={open}
        title=""
        subTitle=""
        onConfirm={onConfirm}
        onCancel={onCancel}
        children={
          <div className="p-6 max-w-lg mx-auto text-gray-800 font-sans">
            <h2 className="text-blue-800 text-2xl font-semibold text-center border-b-2 border-blue-600 pb-2 mb-4">
              L∆∞u √Ω H·ªßy ƒë∆°n
            </h2>
            <p className="text-base leading-6 mb-2">Quy ƒë·ªãnh h·ªßy nh·ª± sau:</p>
            <p className="text-base leading-6 mb-2">
              H·ªßy tr∆∞·ªõc gi·ªù h·∫πn tr√™n 8 ti·∫øng: Ph·∫°t{" "}
              <span className="font-bold text-red-600">20.000vnd</span>
            </p>
            <p className="text-base leading-6 mb-2">
              H·ªßy tr∆∞·ªõc gi·ªù h·∫πn tr√™n 2 ti·∫øng: Ph·∫°t{" "}
              <span className="font-bold text-red-600">
                50% gi√° tr·ªã ƒë∆°n h√†ng h·ªßy
              </span>
            </p>
            <p className="text-base leading-6 mb-2">
              H·ªßy tr∆∞·ªõc gi·ªù h·∫πn d∆∞·ªõi 2 ti·∫øng: Ph·∫°t{" "}
              <span className="font-bold text-red-600">
                70% gi√° tr·ªã ƒë∆°n h√†ng h·ªßy
              </span>
            </p>
            <p className="italic text-gray-600 mt-4 border-l-4 border-blue-600 pl-3">
              ƒê·ªëi v·ªõi tr∆∞·ªùng h·ª£p b·∫°n ƒë√£ ƒë·∫øn n∆°i ƒë·ªÉ l·∫•y h√†ng nh∆∞ng kh√¥ng li√™n h·ªá
              ƒë∆∞·ª£c v·ªõi kh√°ch h√†ng, b·∫°n s·∫Ω kh√¥ng b·ªã ph·∫°t. ƒê·ªìng th·ªùi, v√¨ nh·ªØng ƒë∆°n
              h√†ng m√† ngu·ªìn b·∫°n m·ªü t·∫°o sai so v·ªõi th·ª±c t·∫ø ƒë∆°n h√†ng ngu·ªìn mua ƒë·∫øn
              l·∫•y, b·∫°n c≈©ng s·∫Ω kh√¥ng b·ªã ph·∫°t.
            </p>
          </div>
        }
      />

      <InfoPopup
        title="H·ªßy ƒë∆°n h√†ng th√†nh c√¥ng"
        isOpen={isOpenInfo}
        type="success"
        onClose={onConfirmInfo}
      />
    </>
  );
};
function OrderList({ selectedStatus }: OrderListProps) {
  console.log("üöÄ ~ OrderList ~ selectedStatus:", selectedStatus);
  const { orders } = useApi();
  console.log("üöÄ ~ OrderList ~ orders:", orders);

  // L·∫•y danh s√°ch ƒë∆°n h√†ng theo selectedStatus, m·∫∑c ƒë·ªãnh l√† m·∫£ng r·ªóng n·∫øu kh√¥ng c√≥
  const orderList =
    orders && orders[selectedStatus] ? orders[selectedStatus] : [];

  return (
    <div className="pt-6 h-[calc(100vh-150px-82px)] overflow-y-auto">
      {orderList.length > 0 ? (
        orderList.map((order, idx) => (
          <SellerOrderItem
            key={order.id}
            order={order}
            selectedStatus={selectedStatus}
          /> // D√πng order.id thay v√¨ idx ƒë·ªÉ key unique
        ))
      ) : (
        <p className="text-center text-sm text-gray-500">
          Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ·ªü tr·∫°ng th√°i{" "}
          <span className="font-medium text-primary-color">
            {tabs.find((t) => t.id === selectedStatus)?.label}
          </span>
        </p>
      )}
    </div>
  );
}

export default OrderList;
